#!/usr/bin/bash

#xtool for noop Linux
#Usage: ./xtool machine-triplet

set -e

if [ -z "$1" ]; then
    echo "Please pass machine triplet as an argument";
    exit 1
fi

let BLDR_CORES=`grep "processor" /proc/cpuinfo | wc -l`
let BLDR_CORES=${BLDR_CORES}+1

TARGET="$1"
machine=`echo $TARGET | sed -e 's/\([0-9a-z]*\)-.*/\1/g'`

mkdir -p /root/xtool-done
rm -rf /root/xtool-inst && mkdir -p /root/xtool-inst    
mkdir -p /root/xtool-tmp && cd /root/xtool-tmp

source /var/noop/blds/binutils/binutils.bld
binutils_ver=$DVERSION
if [ -z "$binutils_ver" ]; then
    binutils_ver=$VERSION
fi
binutils_src=$SRC
unset VERSION
unset DVERSION
unset SRC

source /var/noop/blds/gcc/gcc.bld
gcc_ver=$DVERSION
if [ -z "$gcc_ver" ]; then
    gcc_ver=$VERSION
fi
gcc_src="$SRC"
unset VERSION
unset DVERSION
unset SRC

source /var/noop/blds/glibc/glibc.bld
glibc_ver=$DVERSION
if [ -z "$glibc_ver" ]; then
    glibc_ver=$VERSION
fi
glibc_src="$SRC"
unset VERSION
unset DVERSION
unset SRC

if [ -e /var/noop/installed/${TARGET}-linux-headers ]; then

        echo "linux-headers for $TARGET are already installed, skipping...."
        let skip_headers=1
fi

if [ "$skip_headers" != 1 ]; then
    cd /root/xtool-tmp

    set +e
    let kernel_src=`ls linux-* 2>/dev/null | wc -l`
    set -e
    
    if [ $kernel_src = 0 ]; then
        kernel_url=`curl -s -L https://www.kernel.org | egrep "linux-[0-9\.]+\.tar\.xz" | head -n1 | sed -e 's/\.tar\.xz.*/\.tar\.xz/g;s/.*a href="//g'`
        kernel_ver=`echo $kernel_url | sed -e 's/.*linux-\([0-9\.]*\)\.tar\.xz.*/\1/g'`
        wget "$kernel_url" -Olinux.src
        tar xf linux.src && rm linux.src
    else
        kernel_ver=`ls | grep "linux-" | sed -e 's/linux-//g'`
    fi
        
    pushd linux-*
    echo "Trying to install headers for $machine"
    make mrproper
    make ARCH=$machine headers_check
    make ARCH=$machine INSTALL_HDR_PATH=/root/xtool-inst/opt/cross/$TARGET/usr headers_install
    
    cd /root/xtool-inst
    pkgr -genmeta ${TARGET}-linux-headers $kernel_ver
    pkgr -genpkg
    headers_pkg=`ls *.pkg`
    echo "Installing headers..."
    pkgr -f $headers_pkg
    mv $headers_pkg /root/xtool-done
    echo "linux-headers done, pkg moved to /root/xtool-done"
fi

echo "Using Binutils version $binutils_ver"

if [ -e /var/noop/installed/${TARGET}-binutils ] &&
    [ "true" == `pkgr --jsonmeta ${TARGET}-binutils | jq -r .installed` ] &&
    [ "$binutils_ver" == `pkgr --jsonmeta ${TARGET}-binutils | jq -r .version` ]; then

        echo "Binutils for $TARGET version $binutils_ver is already installed, skipping...."
        let skip_binutils=1
fi

if [ "$skip_binutils" != 1 ]; then

    rm -rf /root/xtool-inst/* 
    cd /root/xtool-tmp
    if [ ! -e ./binutils-$binutils_ver ]; then
        wget $binutils_src -Obinutils_src
        tar xf binutils_src && rm binutils_src
    fi

    cd binutils-$binutils_ver
    mkdir -p build && cd build
    ../configure --target=$TARGET --prefix=/usr --disable-nls --disable-werror --disable-multilib --with-sysroot
    make -j${BLDR_CORES}
    make DESTDIR=/root/xtool-inst install

    cd /root/xtool-inst
    pkgr -genmeta ${TARGET}-binutils $binutils_ver
    pkgr -genpkg
    binutils_pkg=`ls *.pkg`
    echo "Installing binutils..."
    pkgr -f $binutils_pkg
    mv $binutils_pkg /root/xtool-done
    echo "Binutils done, pkg moved to /root/xtool-done"
fi



echo "Using GCC version $gcc_ver"
if [ -e /var/noop/installed/${TARGET}-gcc ] &&
    [ "true" == `pkgr --jsonmeta ${TARGET}-gcc | jq -r .installed` ] &&
    [ "$gcc_ver" == `pkgr --jsonmeta ${TARGET}-gcc | jq -r .version` ]; then

        echo "GCC for $TARGET version $gcc_ver is already installed, skipping...."
        let skip_gcc=1
fi


if [ "$skip_gcc" != 1 ]; then

    rm -rf /root/xtool-inst/* 

    cd /root/xtool-tmp
    if [ ! -e ./gcc-$gcc_ver ]; then
        wget $gcc_src -Ogcc_src
        tar xf gcc_src && rm gcc_src
    fi

    cd gcc-$gcc_ver
    mkdir -p build && cd build
    ../configure --target=$TARGET --prefix=/usr \
        --libdir=/usr/lib --libexecdir=/usr/lib \
        --disable-nls --enable-languages=c --without-headers \
        --disable-threads --enable-boostrap --disable-shared --disable-multilib

    make -j${BLDR_CORES} all-gcc
    make -j${BLDR_CORES} all-target-libgcc
    make DESTDIR=/root/xtool-inst install-gcc
    make DESTDIR=/root/xtool-inst install-target-libgcc

    cd /root/xtool-inst
    cp /var/noop/libdb /var/noop/libdb.xtool
    pkgr -genmeta ${TARGET}-gcc $gcc_ver
    pkgr -genpkg
    mv /var/noop/libdb.xtool /var/noop/libdb
    gcc_pkg=`ls *.pkg`
    echo "Installing gcc..."
    pkgr -f $gcc_pkg
    mv $gcc_pkg /root/xtool-done
    echo "GCC done, pkg moved to /root/xtool-done"
fi


echo "Using Glibc version $glibc_ver"
if [ -e /var/noop/installed/${TARGET}-glibc ] &&
    [ "true" == `pkgr --jsonmeta ${TARGET}-glibc | jq -r .installed` ] &&
    [ "$glibc_ver" == `pkgr --jsonmeta ${TARGET}-glibc | jq -r .version` ]; then

        echo "Glibc Headers for $TARGET version $glibc_ver is already installed, skipping...."
        let skip_glibc=1
fi

if [ "$skip_glibc" != 1 ]; then
    rm -rf /root/xtool-inst/* 

    cd /root/xtool-tmp
    if [ ! -e ./glibc-$glibc_ver ]; then
        wget $glibc_src -Oglibc_src
        tar xf glibc_src && rm glibc_src
    fi
    
    
    cd glibc-$glibc_ver
    mkdir -p build && cd build
   
    ../configure --host=$TARGET --prefix=/ \
        --with-headers=/opt/cross/$TARGET/usr/include \
        --includedir=/usr/include \
        --build=$MACHTYPE \
        --enable-kernel=2.6.32 \
        --enable-add-ons \
        --disable-multilib \
        libc_cv_forced_unwind=yes \
        libc_cv_c_cleanup=yes\
        --disable-profile

#    make cross_compiling=yes install_root=/root/xtool-tmp/glibc-headers install-bootstrap-headers=yes install-headers
    make -j${BLDR_CORES}
    make DESTDIR=/root/xtool-inst/opt/cross/$TARGET/ install

    cd /root/xtool-inst
    cp /var/noop/libdb /var/noop/libdb.xtool
    set +e
    find {bin,lib,sbin,lib32} -type f 2> /dev/null | xargs chmod 755 &> /dev/null
    find {usr/bin,usr/lib,usr/sbin,usr/lib32} -type f 2> /dev/null | xargs chmod 755 &> /dev/null
    set -e
    pkgr -genmeta ${TARGET}-glibc $glibc_ver
    pkgr -genpkg
    mv /var/noop/libdb.xtool /var/noop/libdb
    glibc_pkg=`ls *.pkg`
    echo "Installing glibc..."
    pkgr -f $glibc_pkg
    mv $glibc_pkg /root/xtool-done
    echo "Glibc done, pkg moved to /root/xtool-done"
fi


set +e
let gcc_threads_disabled=`${TARGET}-gcc -v 2>&1 | grep "disable-threads" | wc -l`
set -e
if [ $gcc_threads_disabled = 1 ]; then
    echo "Bulding GCC with threads and C++ support"

    rm -rf /root/xtool-inst/* 

    cd /root/xtool-tmp
    cd gcc-$gcc_ver
    rm -rf build && mkdir build
    cd build
    ../configure --target=$TARGET --prefix=/usr \
        --libdir=/usr/lib --libexecdir=/usr/lib \
        --with-sysroot=/opt/cross/$TARGET \
        --disable-nls --enable-languages=c,c++ \
        --disable-shared --disable-multilib
    make -j${BLDR_CORES}
    make DESTDIR=/root/xtool-inst install

    cd /root/xtool-inst
    cp /var/noop/libdb /var/noop/libdb.xtool
    pkgr -genmeta ${TARGET}-gcc $gcc_ver
    pkgr -genpkg
    mv /var/noop/libdb.xtool /var/noop/libdb
    gcc_pkg=`ls *.pkg`
    echo "Replacing gcc..."
    pkgr -r ${TARGET}-gcc
    pkgr -f $gcc_pkg
    mv $gcc_pkg /root/xtool-done
    echo "GCC done, pkg moved to /root/xtool-done"
fi

echo "All Done"
exit 0
